import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:logger/logger.dart';

class Tariff {
  final String id;
  final String title;
  final int price;                  // –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
  final List<String> features;
  final bool isBest;

  final String duration;           // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1 –º–µ—Å—è—Ü")
  final int sessionCount;          // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: –∫–æ–ª-–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12)

  Tariff({
    required this.id,
    required this.title,
    required this.price,
    required this.features,
    this.isBest = false,
    required this.duration,
    required this.sessionCount,
  });

  /// –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Tariff –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore

  factory Tariff.fromFirestore(DocumentSnapshot doc) {
    final logger = Logger();

    try {
      logger.d('üîß –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ ${doc.id}');
      final data = doc.data() as Map<String, dynamic>? ?? {};

      logger.v('üìù –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:');

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ features
      List<String> features = [];
      if (data['features'] is String) {
        logger.w('‚ö†Ô∏è –ü–æ–ª–µ features —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ –º–∞—Å—Å–∏–≤–æ–º');
        features = [data['features'] as String];
      } else if (data['features'] is List) {
        features = (data['features'] as List).map((e) => e.toString()).toList();
      }

      logger.d('‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Tariff');
      final tariff = Tariff(
        id: doc.id,
        title: data['title'] as String? ?? '',
        price: data['price'] as int? ?? 0,
        features: features,
        isBest: data['isBest'] as bool? ?? false,
        duration: data['duration'] as String? ?? '1 –º–µ—Å—è—Ü',
        sessionCount: data['sessionCount'] as int? ?? 0,
      );

      logger.v('üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω Tariff: $tariff.toFirestore()');
      return tariff;
    } catch (e, stackTrace) {
      logger.e('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Tariff –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${doc.id}',
          error: e,
          stackTrace: stackTrace);
      rethrow;
    }
  }


  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç Tariff –≤ Map<String, dynamic> –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Firestore
  Map<String, dynamic> toFirestore() {
    return {
      'title': title,
      'price': price,
      'features': features,
      'isBest': isBest,
      'duration': duration,
      'sessionCount': sessionCount,
    };
  }
}
